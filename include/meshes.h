#ifndef MESHES_H
#define MESHES_H

#include <triangle.h>

/**
 * @brief Golden ratio.
 *
 * @tparam T numeric type.
 */
template <class T>
const T phi = (1.0+2.23606797749979)*0.5;

/**
 * @brief A centred Dodecahedron's vertices.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<vec3<T>> DODECAHEDRON_VERTICES =
{
    vec3<T>(1.0, 1.0, 1.0)/phi<T>,
    vec3<T>(1.0, 1.0, -1.0)/phi<T>,
    vec3<T>(1.0, -1.0, 1.0)/phi<T>,
    vec3<T>(-1.0, 1.0, 1.0)/phi<T>,
    vec3<T>(-1.0, -1.0, -1.0)/phi<T>,
    vec3<T>(-1.0, -1.0, 1.0)/phi<T>,
    vec3<T>(-1.0, 1.0, -1.0)/phi<T>,
    vec3<T>(1.0, -1.0, -1.0)/phi<T>,
    vec3<T>(0.0, phi<T>, 1.0/phi<T>)/phi<T>,
    vec3<T>(0.0, phi<T>, -1.0/phi<T>)/phi<T>,
    vec3<T>(0.0, -phi<T>, 1.0/phi<T>)/phi<T>,
    vec3<T>(0.0, -phi<T>, -1.0/phi<T>)/phi<T>,
    vec3<T>(1.0/phi<T>, 0.0, phi<T>)/phi<T>,
    vec3<T>(1.0/phi<T>, 0.0, -phi<T>)/phi<T>,
    vec3<T>(-1.0/phi<T>, 0.0, phi<T>)/phi<T>,
    vec3<T>(-1.0/phi<T>, 0.0, -phi<T>)/phi<T>,
    vec3<T>(phi<T>, 1.0/phi<T>, 0.0)/phi<T>,
    vec3<T>(phi<T>, -1.0/phi<T>, 0.0)/phi<T>,
    vec3<T>(-phi<T>, 1.0/phi<T>, 0.0)/phi<T>,
    vec3<T>(-phi<T>, -1.0/phi<T>, 0.0)/phi<T>
};

/**
 * @brief A centred Dodecahedron's triangulation.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<Trixel<T>> DODECAHEDRON =
{
  {"0",DODECAHEDRON_VERTICES<T>[0],DODECAHEDRON_VERTICES<T>[16],DODECAHEDRON_VERTICES<T>[8]},
  {"1",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[16],DODECAHEDRON_VERTICES<T>[1]},
  {"2",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[1],DODECAHEDRON_VERTICES<T>[9]},
  {"3",DODECAHEDRON_VERTICES<T>[9],DODECAHEDRON_VERTICES<T>[1],DODECAHEDRON_VERTICES<T>[13]},
  {"4",DODECAHEDRON_VERTICES<T>[9],DODECAHEDRON_VERTICES<T>[13],DODECAHEDRON_VERTICES<T>[15]},
  {"5",DODECAHEDRON_VERTICES<T>[9],DODECAHEDRON_VERTICES<T>[15],DODECAHEDRON_VERTICES<T>[6]},
  {"6",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[9],DODECAHEDRON_VERTICES<T>[6]},
  {"7",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[6],DODECAHEDRON_VERTICES<T>[18]},
  {"8",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[18],DODECAHEDRON_VERTICES<T>[3]},
  {"9",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[3],DODECAHEDRON_VERTICES<T>[14]},
  {"10",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[14],DODECAHEDRON_VERTICES<T>[12]},
  {"11",DODECAHEDRON_VERTICES<T>[8],DODECAHEDRON_VERTICES<T>[12],DODECAHEDRON_VERTICES<T>[0]},
  {"12",DODECAHEDRON_VERTICES<T>[0],DODECAHEDRON_VERTICES<T>[12],DODECAHEDRON_VERTICES<T>[2]},
  {"13",DODECAHEDRON_VERTICES<T>[0],DODECAHEDRON_VERTICES<T>[2],DODECAHEDRON_VERTICES<T>[17]},
  {"14",DODECAHEDRON_VERTICES<T>[0],DODECAHEDRON_VERTICES<T>[17],DODECAHEDRON_VERTICES<T>[16]},
  {"15",DODECAHEDRON_VERTICES<T>[1],DODECAHEDRON_VERTICES<T>[16],DODECAHEDRON_VERTICES<T>[17]},
  {"16",DODECAHEDRON_VERTICES<T>[1],DODECAHEDRON_VERTICES<T>[17],DODECAHEDRON_VERTICES<T>[7]},
  {"17",DODECAHEDRON_VERTICES<T>[1],DODECAHEDRON_VERTICES<T>[7],DODECAHEDRON_VERTICES<T>[13]},
  {"18",DODECAHEDRON_VERTICES<T>[13],DODECAHEDRON_VERTICES<T>[7],DODECAHEDRON_VERTICES<T>[11]},
  {"19",DODECAHEDRON_VERTICES<T>[13],DODECAHEDRON_VERTICES<T>[11],DODECAHEDRON_VERTICES<T>[4]},
  {"20",DODECAHEDRON_VERTICES<T>[13],DODECAHEDRON_VERTICES<T>[4],DODECAHEDRON_VERTICES<T>[15]},
  {"21",DODECAHEDRON_VERTICES<T>[6],DODECAHEDRON_VERTICES<T>[15],DODECAHEDRON_VERTICES<T>[4]},
  {"22",DODECAHEDRON_VERTICES<T>[6],DODECAHEDRON_VERTICES<T>[4],DODECAHEDRON_VERTICES<T>[19]},
  {"23",DODECAHEDRON_VERTICES<T>[6],DODECAHEDRON_VERTICES<T>[19],DODECAHEDRON_VERTICES<T>[18]},
  {"24",DODECAHEDRON_VERTICES<T>[18],DODECAHEDRON_VERTICES<T>[19],DODECAHEDRON_VERTICES<T>[5]},
  {"25",DODECAHEDRON_VERTICES<T>[18],DODECAHEDRON_VERTICES<T>[5],DODECAHEDRON_VERTICES<T>[14]},
  {"26",DODECAHEDRON_VERTICES<T>[18],DODECAHEDRON_VERTICES<T>[14],DODECAHEDRON_VERTICES<T>[3]},
  {"27",DODECAHEDRON_VERTICES<T>[14],DODECAHEDRON_VERTICES<T>[5],DODECAHEDRON_VERTICES<T>[10]},
  {"28",DODECAHEDRON_VERTICES<T>[14],DODECAHEDRON_VERTICES<T>[10],DODECAHEDRON_VERTICES<T>[2]},
  {"29",DODECAHEDRON_VERTICES<T>[14],DODECAHEDRON_VERTICES<T>[2],DODECAHEDRON_VERTICES<T>[12]},
  {"30",DODECAHEDRON_VERTICES<T>[2],DODECAHEDRON_VERTICES<T>[10],DODECAHEDRON_VERTICES<T>[11]},
  {"31",DODECAHEDRON_VERTICES<T>[2],DODECAHEDRON_VERTICES<T>[11],DODECAHEDRON_VERTICES<T>[7]},
  {"32",DODECAHEDRON_VERTICES<T>[2],DODECAHEDRON_VERTICES<T>[7],DODECAHEDRON_VERTICES<T>[17]},
  {"33",DODECAHEDRON_VERTICES<T>[4],DODECAHEDRON_VERTICES<T>[11],DODECAHEDRON_VERTICES<T>[10]},
  {"34",DODECAHEDRON_VERTICES<T>[4],DODECAHEDRON_VERTICES<T>[10],DODECAHEDRON_VERTICES<T>[5]},
  {"35",DODECAHEDRON_VERTICES<T>[4],DODECAHEDRON_VERTICES<T>[5],DODECAHEDRON_VERTICES<T>[19]}
};

/**
 * @brief Golden ratio scaled for a unit icosahedron.
 *
 * @tparam T numeric type.
 */
template <class T>
const T ICOSAHEDRON_X = 0.525731112119133606;

/**
 * @brief 1 scaled for a unit icosahedron.
 *
 * @tparam T numeric type.
 */
template <class T>
const T ICOSAHEDRON_Z = 0.850650808352039932;

/**
 * @brief A centred Icosahedron's vertices.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<vec3<T>> ICOSAHEDRON_VERTICES =
{
  {-ICOSAHEDRON_X<T>,0.0,ICOSAHEDRON_Z<T>}, {ICOSAHEDRON_X<T>,0.0,ICOSAHEDRON_Z<T>}, {-ICOSAHEDRON_X<T>,0.0,-ICOSAHEDRON_Z<T>}, {ICOSAHEDRON_X<T>,0.0,-ICOSAHEDRON_Z<T>},
  {0.0,ICOSAHEDRON_Z<T>,ICOSAHEDRON_X<T>}, {0.0,ICOSAHEDRON_Z<T>,-ICOSAHEDRON_X<T>}, {0.0,-ICOSAHEDRON_Z<T>,ICOSAHEDRON_X<T>}, {0.0,-ICOSAHEDRON_Z<T>,-ICOSAHEDRON_X<T>},
  {ICOSAHEDRON_Z<T>,ICOSAHEDRON_X<T>,0.0}, {-ICOSAHEDRON_Z<T>,ICOSAHEDRON_X<T>, 0.0}, {ICOSAHEDRON_Z<T>,-ICOSAHEDRON_X<T>,0.0}, {-ICOSAHEDRON_Z<T>,-ICOSAHEDRON_X<T>, 0.0}
};

/**
 * @brief A centred Icosahedrons's triangulation.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<Trixel<T>> ICOSAHEDRON =
{
  {"0", ICOSAHEDRON_VERTICES<T>[1],ICOSAHEDRON_VERTICES<T>[4],ICOSAHEDRON_VERTICES<T>[0]},
  {"1", ICOSAHEDRON_VERTICES<T>[4],ICOSAHEDRON_VERTICES<T>[9],ICOSAHEDRON_VERTICES<T>[0]},
  {"2", ICOSAHEDRON_VERTICES<T>[4],ICOSAHEDRON_VERTICES<T>[5],ICOSAHEDRON_VERTICES<T>[9]},
  {"3", ICOSAHEDRON_VERTICES<T>[8],ICOSAHEDRON_VERTICES<T>[5],ICOSAHEDRON_VERTICES<T>[4]},
  {"4", ICOSAHEDRON_VERTICES<T>[1],ICOSAHEDRON_VERTICES<T>[8],ICOSAHEDRON_VERTICES<T>[4]},
  {"5", ICOSAHEDRON_VERTICES<T>[1],ICOSAHEDRON_VERTICES<T>[10],ICOSAHEDRON_VERTICES<T>[8]},
  {"6", ICOSAHEDRON_VERTICES<T>[10],ICOSAHEDRON_VERTICES<T>[3],ICOSAHEDRON_VERTICES<T>[8]},
  {"7", ICOSAHEDRON_VERTICES<T>[8],ICOSAHEDRON_VERTICES<T>[3],ICOSAHEDRON_VERTICES<T>[5]},
  {"8", ICOSAHEDRON_VERTICES<T>[3],ICOSAHEDRON_VERTICES<T>[2],ICOSAHEDRON_VERTICES<T>[5]},
  {"9", ICOSAHEDRON_VERTICES<T>[3],ICOSAHEDRON_VERTICES<T>[7],ICOSAHEDRON_VERTICES<T>[2]},
  {"10", ICOSAHEDRON_VERTICES<T>[3],ICOSAHEDRON_VERTICES<T>[10],ICOSAHEDRON_VERTICES<T>[7]},
  {"11", ICOSAHEDRON_VERTICES<T>[10],ICOSAHEDRON_VERTICES<T>[6],ICOSAHEDRON_VERTICES<T>[7]},
  {"12", ICOSAHEDRON_VERTICES<T>[6],ICOSAHEDRON_VERTICES<T>[11],ICOSAHEDRON_VERTICES<T>[7]},
  {"13", ICOSAHEDRON_VERTICES<T>[6],ICOSAHEDRON_VERTICES<T>[0],ICOSAHEDRON_VERTICES<T>[11]},
  {"14", ICOSAHEDRON_VERTICES<T>[6],ICOSAHEDRON_VERTICES<T>[1],ICOSAHEDRON_VERTICES<T>[0]},
  {"15", ICOSAHEDRON_VERTICES<T>[10],ICOSAHEDRON_VERTICES<T>[1],ICOSAHEDRON_VERTICES<T>[6]},
  {"16", ICOSAHEDRON_VERTICES<T>[11],ICOSAHEDRON_VERTICES<T>[0],ICOSAHEDRON_VERTICES<T>[9]},
  {"17", ICOSAHEDRON_VERTICES<T>[2],ICOSAHEDRON_VERTICES<T>[11],ICOSAHEDRON_VERTICES<T>[9]},
  {"18", ICOSAHEDRON_VERTICES<T>[5],ICOSAHEDRON_VERTICES<T>[2],ICOSAHEDRON_VERTICES<T>[9]},
  {"19", ICOSAHEDRON_VERTICES<T>[11],ICOSAHEDRON_VERTICES<T>[2],ICOSAHEDRON_VERTICES<T>[7]}
};

/**
 * @brief A centred Octahedron's vertices.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<vec3<T>> OCTAHEDRON_VERTICES =
{
  {0.0,0.0,1.0},
  {1.0,0.0,0.0},
  {0.0,1.0,0.0},
  {-1.0,0.0,0.0},
  {0.0,-1.0,0.0},
  {0.0,0.0,-1.0}
};

/**
 * @brief A centred Octahedron's triangulation.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<Trixel<T>> OCTAHEDRON =
{
  {"S0",OCTAHEDRON_VERTICES<T>[1],OCTAHEDRON_VERTICES<T>[5],OCTAHEDRON_VERTICES<T>[2],3},
  {"N0",OCTAHEDRON_VERTICES<T>[1],OCTAHEDRON_VERTICES<T>[0],OCTAHEDRON_VERTICES<T>[4],3},
  {"S1",OCTAHEDRON_VERTICES<T>[2],OCTAHEDRON_VERTICES<T>[5],OCTAHEDRON_VERTICES<T>[3],3},
  {"N1",OCTAHEDRON_VERTICES<T>[4],OCTAHEDRON_VERTICES<T>[0],OCTAHEDRON_VERTICES<T>[3],3},
  {"S2",OCTAHEDRON_VERTICES<T>[3],OCTAHEDRON_VERTICES<T>[5],OCTAHEDRON_VERTICES<T>[4],3},
  {"N2",OCTAHEDRON_VERTICES<T>[3],OCTAHEDRON_VERTICES<T>[0],OCTAHEDRON_VERTICES<T>[2],3},
  {"S3",OCTAHEDRON_VERTICES<T>[4],OCTAHEDRON_VERTICES<T>[5],OCTAHEDRON_VERTICES<T>[1],3},
  {"N3",OCTAHEDRON_VERTICES<T>[2],OCTAHEDRON_VERTICES<T>[0],OCTAHEDRON_VERTICES<T>[1],3}
};

template <class T>
const T INV_SQRT3 = 1.0/1.7320508075688772;

/**
 * @brief A centred Tetrahedron's vertices.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<vec3<T>> TETRAHEDRON_VERTICES =
{
  vec3<T>(1.0, 1.0, 1.0)*INV_SQRT3<T>,
  vec3<T>(-1.0,1.0, -1.0)*INV_SQRT3<T>,
  vec3<T>(1.0, -1.0, -1.0)*INV_SQRT3<T>,
  vec3<T>(-1.0, -1.0, 1.0)*INV_SQRT3<T>
};

/**
 * @brief A centred Tetrahedron's triangulation.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<Trixel<T>> TETRAHEDRON =
{
  {"0",TETRAHEDRON_VERTICES<T>[1],TETRAHEDRON_VERTICES<T>[0],TETRAHEDRON_VERTICES<T>[2]},
  {"1",TETRAHEDRON_VERTICES<T>[3],TETRAHEDRON_VERTICES<T>[0],TETRAHEDRON_VERTICES<T>[1]},
  {"2",TETRAHEDRON_VERTICES<T>[2],TETRAHEDRON_VERTICES<T>[3],TETRAHEDRON_VERTICES<T>[1]},
  {"3",TETRAHEDRON_VERTICES<T>[0],TETRAHEDRON_VERTICES<T>[3],TETRAHEDRON_VERTICES<T>[2]},
};

template <class T>
const T INV_SQRT2 = 1.0/1.4142135623730951;

/**
 * @brief A centred Cube's vertices.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<vec3<T>> CUBE_VERTICES =
{
  INV_SQRT2<T>*vec3<T>(-1.0, -1.0, 1.0),
  INV_SQRT2<T>*vec3<T>(1.0, -1.0, 1.0),
  INV_SQRT2<T>*vec3<T>(1.0, 1.0, 1.0),
  INV_SQRT2<T>*vec3<T>(-1.0, 1.0, 1.0),
  INV_SQRT2<T>*vec3<T>(-1.0, -1.0, -1.0),
  INV_SQRT2<T>*vec3<T>(1.0, -1.0, -1.0),
  INV_SQRT2<T>*vec3<T>(1.0, 1.0, -1.0),
  INV_SQRT2<T>*vec3<T>(-1.0, 1.0, -1.0)
};

/**
 * @brief A centred Cube's triangulation.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<Trixel<T>> CUBE =
{
		{"F0", CUBE_VERTICES<T>[0], CUBE_VERTICES<T>[1], CUBE_VERTICES<T>[2]},
		{"F1", CUBE_VERTICES<T>[2], CUBE_VERTICES<T>[3], CUBE_VERTICES<T>[0]},
		{"R0", CUBE_VERTICES<T>[1], CUBE_VERTICES<T>[5], CUBE_VERTICES<T>[6]},
		{"R1", CUBE_VERTICES<T>[6], CUBE_VERTICES<T>[2], CUBE_VERTICES<T>[1]},
		{"B0", CUBE_VERTICES<T>[7], CUBE_VERTICES<T>[6], CUBE_VERTICES<T>[5]},
		{"B1", CUBE_VERTICES<T>[5], CUBE_VERTICES<T>[4], CUBE_VERTICES<T>[7]},
		{"L0", CUBE_VERTICES<T>[4], CUBE_VERTICES<T>[0], CUBE_VERTICES<T>[3]},
		{"L1", CUBE_VERTICES<T>[3], CUBE_VERTICES<T>[7], CUBE_VERTICES<T>[4]},
		{"L0", CUBE_VERTICES<T>[4], CUBE_VERTICES<T>[5], CUBE_VERTICES<T>[1]},
		{"L1", CUBE_VERTICES<T>[1], CUBE_VERTICES<T>[0], CUBE_VERTICES<T>[4]},
		{"T0", CUBE_VERTICES<T>[3], CUBE_VERTICES<T>[2], CUBE_VERTICES<T>[6]},
		{"T1", CUBE_VERTICES<T>[6], CUBE_VERTICES<T>[7], CUBE_VERTICES<T>[3]}
};

template <class T>
const T SQRT3 = 1.7320508075688772;

template <class T>
const T SQRT6 = 2.449489742783178;

// 1.0/std::sqrt((1.0/12.0)*std::pow(1.0 + std::sqrt(6.0),2.0) + std::pow(-0.5*std::sqrt(6.0) - 0.5,2.0));
template <class T>
const T C = 0.5021179759100816;

/**
 * @brief A centred Triagmented triangular prism's vertices.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<vec3<T>> TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES =
{
  C<T>*vec3<T>(0.0, -2.0/SQRT3<T>, 1.0),
  C<T>*vec3<T>(0.0, -2.0/SQRT3<T>, -1.0),
  C<T>*vec3<T>(1.0, 1.0/SQRT3<T>, 1.0),
  C<T>*vec3<T>(-1.0, 1.0/SQRT3<T>, 1.0),
  C<T>*vec3<T>(1.0, 1.0/SQRT3<T>, -1.0),
  C<T>*vec3<T>(-1.0, 1.0/SQRT3<T>, -1.0),
  C<T>*vec3<T>(0.0, (1.0+SQRT6<T>)/SQRT3<T>, 0.0),
  C<T>*vec3<T>((1.0+SQRT6<T>)/2.0, -(1.0+SQRT6<T>)/(2.0*SQRT3<T>), 0.0),
  C<T>*vec3<T>(-(1.0+SQRT6<T>)/2.0, -(1.0+SQRT6<T>)/(2.0*SQRT3<T>), 0.0)
};

/**
 * @brief A centred Triagmented triangular prism's triangulation.
 *
 * @tparam T numeric type.
 */
template <class T>
const std::vector<Trixel<T>> TRIAUGMENTED_TRIANGULAR_PRISM =
{
  {"0",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[3],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[6],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[2]},
  {"1",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[5],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[6],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[3]},
  {"2",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[4],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[6],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[5]},
  {"3",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[2],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[6],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[4]},
  {"4",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[7],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[2],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[4]},
  {"5",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[0],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[3],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[2]},
  {"6",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[1],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[4],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[5]},
  {"7",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[5],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[3],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[8]},
  {"8",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[8],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[0],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[1]},
  {"9",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[1],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[0],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[7]},
  {"10",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[0],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[2],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[7]},
  {"11",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[8],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[3],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[0]},
  {"12",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[1],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[7],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[4]},
  {"13",TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[5],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[8],TRIAUGMENTED_TRIANGULAR_PRISM_VERTICES<T>[1]}
};

/**
 * @brief Centre a triangulation at (0,0,0).
 *
 * @tparam T numeric type.
 * @param mesh the triangulation to centre.
 */
template <class T>
void centreMesh(std::vector<Trixel<T>> & mesh)
{
  vec3<T> com = vec3<T>(0.0);
  for (const auto & tri : mesh)
  {
    com += tri.x + tri.y + tri.z;
  }
  com /= float(mesh.size()*3);
  for (auto & tri : mesh){
    tri.x -= com;
    tri.y -= com;
    tri.z -= com;
  }
}

#endif /* MESHES_H */
